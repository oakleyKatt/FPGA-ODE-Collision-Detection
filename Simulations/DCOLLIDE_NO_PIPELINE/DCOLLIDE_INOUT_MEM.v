
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DCOLLIDE_INOUT_MEM(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// LED //////////
	LEDG,
	LEDR,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW,

	//////////// SEG7 //////////
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,

	//////////// RS232 //////////
	UART_CTS,
	UART_RTS,
	UART_RXD,
	UART_TXD 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// LED //////////
output		     [8:0]		LEDG;
output		    [17:0]		LEDR;

//////////// KEY //////////
input 		     [3:0]		KEY;

//////////// SW //////////
input 		    [17:0]		SW;

//////////// SEG7 //////////
output		     [6:0]		HEX0;
output		     [6:0]		HEX1;
output		     [6:0]		HEX2;
output		     [6:0]		HEX3;
output		     [6:0]		HEX4;
output		     [6:0]		HEX5;
output		     [6:0]		HEX6;
output		     [6:0]		HEX7;

//////////// RS232 //////////
input 		          		UART_CTS;
output		          		UART_RTS;
input 		          		UART_RXD;
output		          		UART_TXD;


//=======================================================
//  REG/WIRE declarations
//=======================================================

//=================== control unit ======================
wire rst_out_w;
wire [8:0] address_w;
wire [31:0] outs_reg0;
wire [31:0] outs_reg1;
wire [31:0] outs_reg2;
wire [31:0] outs_reg3;
wire [31:0] outs_reg4;
wire [31:0] outs_reg5;
wire [31:0] outs_reg6;
wire [31:0] outs_reg7;
wire [31:0] addressin_in_w;
wire [31:0] addressin_out_w;
wire wein_w;
//=================== control unit ======================

// ====================== FLAGS =========================
reg flag_test1 = 1'b1;
// ====================== FLAGS =========================

// ==================== COUNTERS ========================
reg [5:0] countResults = 0;
reg [31:0] counter = 0;
// ==================== COUNTERS ========================

//=================== RESET CONTROL =====================
wire rstOut_w;
wire [3:0] state_w;
reg rst_ctrl_rst = 0;
//=================== RESET CONTROL =====================

// ====================== INMEMORY ======================
               
wire [31:0] outaddress_w;                       
wire [31:0] datain_mem_w;                        
wire [31:0] dataout1_mem_w;                     
wire [31:0] dataout2_mem_w;                     
wire [31:0] dataout3_mem_w;                     
wire [31:0] dataout4_mem_w;                     
wire [31:0] dataout5_mem_w;                     
wire [31:0] dataout6_mem_w;                     
wire [31:0] dataout7_mem_w;                     
wire [31:0] dataout8_mem_w;                     
wire cs_w;                                       
wire oe_w;                                      
wire fm_w;
wire write_done_w;
reg signed [31:0] inaddress_reg = -32'd1;                                     
reg signed [31:0] inaddress_reg_aux = -32'd1; 
reg we_reg;                                        
// ====================== INMEMORY ======================

// ======================= JTAG =========================
wire rdyData;
wire rdyData2;
// ======================= JTAG =========================

//================== DCOLLIDESPHERES ====================
wire [31:0] outs [8:0];
reg [31:0] outs_reg [8:0];
wire done_w;
wire [31:0] check1;
wire [31:0] check2;
wire [31:0] check3;
wire [31:0] check4;
//================== DCOLLIDESPHERES ====================

// ===================== OUTMEMORY ======================
wire [31:0] outaddress_w2;
wire [31:0] dataout_mem_w2;
wire we_w2;         
wire [31:0] outaddress2_w;         
// ===================== OUTMEMORY ======================

//=======================================================
//  Structural coding
//=======================================================
assign cs_w = 1'b1;
assign LEDG[0] = fm_w;
assign LEDG[1] = done_w;
assign LEDG[2] = fm_w;
assign LEDG[3] = rstOut_w;
assign LEDG[4] = oe_w;
assign LEDG[5] = we_w2;
control_unit control(
	.in_out0(outs[0]),
	.in_out1(outs[1]),
	.in_out2(outs[2]),
	.in_out3(outs[3]),
	.in_out4(outs[4]),
	.in_out5(outs[5]),
	.in_out6(outs[6]),
	.in_out7(outs[7]),
	.rstmaster(1'b1),
	.rst(fm_w),
	.clk(CLOCK_50),
	.done(done_w),
	.rdyData(rdyData),
	.rst_out(rst_out_w),
	.oe(oe_w),
	.addressin_in(addressin_in_w),
	.wein(wein_w),
	.addressout(outaddress2_w),
	.weout(we_w2),
	.addressin_out(addressin_out_w),
	.out0(outs_reg0),
	.out1(outs_reg1),
	.out2(outs_reg2),
	.out3(outs_reg3),
	.out4(outs_reg4),
	.out5(outs_reg5),
	.out6(outs_reg6),
	.out7(outs_reg7)
);

ram_sp_sr_sw memory(
	.clk(CLOCK_50)         , // Clock Input
	.addressin(addressin_in_w)     , // Address Input
	.addressout(addressin_out_w)     , // Address Output
	.datain(datain_mem_w)        , // Data bi-directional
	.dataout0(dataout1_mem_w),		
	.dataout1(dataout2_mem_w),		
	.dataout2(dataout3_mem_w),		
	.dataout3(dataout4_mem_w),		
	.dataout4(dataout5_mem_w),		
	.dataout5(dataout6_mem_w),		
	.dataout6(dataout7_mem_w),		
	.dataout7(dataout8_mem_w),		
	.cs(cs_w)          , // Chip Select
	.we(wein_w)          , // Write Enable/Read Enable
	.oe(oe_w)          , // Output Enable
	.fm(fm_w)          , // Output Enable
	.write_done(write_done_w)
); 

dCollideSpheres test0(
	.x1(dataout1_mem_w), 
	.y1(dataout2_mem_w), 
	.z1(dataout3_mem_w), 
	.r1(dataout4_mem_w), 
	.x2(dataout5_mem_w), 
	.y2(dataout6_mem_w), 
	.z2(dataout7_mem_w), 
	.r2(dataout8_mem_w), 
	/*.x1(32'hbefc475e), 
	.y1(32'h00000000), 
	.z1(32'h3fc00000), 
	.r1(32'h3f000000), 
	.x2(32'h3efc475e), 
	.y2(32'h00000000), 
	.z2(32'h3fc00000), 
	.r2(32'h3f000000),*/
	.cx(outs[0]), 
	.cy(outs[1]), 
	.cz(outs[2]), 
	.normalx(outs[3]), 
	.normaly(outs[4]), 
	.normalz(outs[5]), 
	.depth(outs[6]), 
	.g1(32'd1), 
	.g2(32'd1), 
	.ret(outs[7]), 
	.clk(CLOCK_50), 
	.rst(rst_out_w), 
	.done(done_w),
	.test(check1),
	.test2(check2),
	.test3(check3),
	.test4(check4)
);

ram_sp_sr_sw_7_outputs memory_7(
	.clk(CLOCK_50)                 ,	// Clock Input
	.addressin(outaddress2_w)    , // Address Input
	.addressout(outaddress_w2), // Address Input
	.datain0(outs_reg0)     , // Data bi-directional
	.datain1(outs_reg1)     , // Data bi-directional
	.datain2(outs_reg2)     , // Data bi-directional
	.datain3(outs_reg3)     , // Data bi-directional
	.datain4(outs_reg4)     , // Data bi-directional
	.datain5(outs_reg5)     , // Data bi-directional
	.datain6(outs_reg6)     , // Data bi-directional
	.dataout(dataout_mem_w2)    , // Data bi-directional
	.cs(1'b1)          	  , // Chip Select
	.we(we_w2)          	  , // Write Enable/Read Enable
	.oe(1'b1)          	  , // Output Enable
	.fm(fm_w2)          	    // Full memory
); 


endmodule
